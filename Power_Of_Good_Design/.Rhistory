shinyApp(ui, server)
server <- function(input, output, session) {
output$cut <- diamonds %>%
count(cut, sort = T, wt = price)
output$clarity <- diamonds %>%
count(clarity, wt = price, sort = T)
output$color <- diamonds %>%
count(color, wt= price, sort = T)
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$cut <- renderTable({
diamonds %>%
count(cut, sort = T, wt = price)
})
output$clarity <- renderTable({
diamonds %>%
count(clarity, wt = price, sort = T)
})
output$color <- renderTable({
diamonds %>%
count(color, wt = price, sort = T)
})
}
shinyApp(ui, server)
diamonds %>% select(carat) %>% count(carat, sort = T)
class(diamonds$cut)
is.numeric(diamonds$carat)
ui <- fluidPage(fluidRow(column(
6,
selectInput("var", "Variables", choices = colnames(diamonds))
)),
fluidRow(
column(4, tableOutput("table"))
),
fluidRow(12, plotOutput("plot")))
server <- function(input, output, session) {
if(is.factor(input$var)){
output$table <- renderTable({
diamonds %>%
count(.data[[input$var]], sort = T, wt = .data[[price]])
})
}else{
output$plot <- renderPlot({
diamonds %>%
ggplot(aes(x = .data[[input$var]]))+
geom_histogram()
})
}
}
shinyApp(ui, server)
server <- function(input, output, session) {
reactive_diamonds <- reactive({
req(input$var)
diamonds
})
if(is.factor(input$var)){
output$table <- renderTable({
reactive_diamonds() %>%
count(.data[[input$var]], sort = T, wt = .data[[price]])
})
}else{
output$plot <- renderPlot({
reactive_diamonds() %>%
ggplot(aes(x = .data[[input$var]]))+
geom_histogram()
})
}
}
shinyApp(ui, server)
server <- function(input, output, session) {
reactive_diamonds <- reactive({
req(input$var)
diamonds
})
if(is.factor(input$var)){
output$table <- renderTable({
reactive_diamonds() %>%
count(input$var, sort = T, wt = price)
})
}else{
output$plot <- renderPlot({
reactive_diamonds() %>%
ggplot(aes(x = input$var))+
geom_histogram()
})
}
}
shinyApp(ui, server)
server <- function(input, output, session) {
reactive_diamonds <- reactive({
req(input$var)
diamonds
})
output$table <- renderTable({
reactive_diamonds() %>%
count(input$var, sort = T, wt = price)
})
output$plot <- renderPlot({
reactive_diamonds() %>%
ggplot(aes(x = input$var))+
geom_histogram()
})
}
shinyApp(ui, server)
str(diamonds)
ui <- fluidPage(fluidRow(column(
6,
selectInput("var", "Variables", choices = colnames(diamonds))
),
column(
6,
selectInput("col", "select variable to plot with", choices = diamonds %>% select_if(is.factor()))
)),
fluidRow(
column(4, tableOutput("table"))
),
fluidRow(12, plotOutput("plot")))
ui <- fluidPage(fluidRow(column(
6,
selectInput("var", "Variables", choices = colnames(diamonds))
),
column(
6,
selectInput("col", "select variable to plot with", choices = diamonds %>% select_if(is.factor(.)))
)),
fluidRow(
column(4, tableOutput("table"))
),
fluidRow(12, plotOutput("plot")))
?select_if
ui <- fluidPage(fluidRow(column(
6,
selectInput("var", "Variables", choices = colnames(diamonds))
),
column(
6,
selectInput("col", "select variable to plot with", choices = diamonds %>% select_if(is.factor))
)),
fluidRow(
column(4, tableOutput("table"))
),
fluidRow(12, plotOutput("plot")))
colnames(diamonds %>% select_if(is.factor))
ui <- fluidPage(fluidRow(column(
6,
selectInput("var", "Variables", choices = colnames(diamonds))
),
column(
6,
selectInput("col", "select variable to plot with", choices = colnames(diamonds %>% select_if(is.factor)))
)),
fluidRow(
column(4, tableOutput("table"))
),
fluidRow(12, plotOutput("plot")))
ui <- fluidPage(fluidRow(column(
6,
selectInput("var", "Variables", choices = colnames(diamonds))
),
column(
6,
selectInput("col", "select variable to plot with", choices = colnames(diamonds %>% select_if(is.factor)))
)),
fluidRow(
column(4, tableOutput("table"))
),
fluidRow(12, plotOutput("plot")))
server <- function(input, output, session) {
reactive_diamonds <- reactive({
req(input$var)
req(input$col)
diamonds %>%
select_if(is.numeric)
})
# output$table <- renderTable({
#   reactive_diamonds() %>%
#     count(input$var, sort = T, wt = price)
# })
output$plot <- renderPlot({
reactive_diamonds() %>%
ggplot(aes(x = .data[[input$var]], fill=input$col))+
geom_histogram()
})
}
shinyApp(ui, server)
shiny::runApp('Shiny_Web_Applications/app001')
runApp('Shiny_Web_Applications/app001')
h3(paste0("Histogram plot for ", renderPrint(input$var), "filled using ", renderPrint(input$col)))
runApp('Shiny_Web_Applications/app001')
runApp('Shiny_Web_Applications/app001')
runApp('Shiny_Web_Applications/app001')
runApp('Shiny_Web_Applications/app001')
library(shiny)
library(tidyverse)
diamonds %>% ggplot(aes(x = carat, fill = cut))+geom_histogram()+position_dodge()
diamonds %>% ggplot(aes(x = carat, fill = cut))+geom_histogram(position = position_dodge())
diamonds %>% ggplot(aes(x = carat, fill = cut))+geom_histogram(position = position_fill())
diamonds %>% ggplot(aes(x = carat, fill = cut))+geom_histogram(position = position_nudge())
ui <- fluidPage(fluidRow(column(
6,
selectInput("var", "Variables", choices = colnames(diamonds))
),
column(
6,
selectInput("col", "select variable to color the plot with", choices = colnames(diamonds %>% select_if(is.factor)))
),
column(
6,
radioButtons("pos", "Select Position to use", choices = c("dodge", "fill", "stack", "nudge"))
),
column(
6,
sliderInput("bin", "Slide to select binwidth to use", min = 0, max = 100, value = 30)
)),
fluidRow(
column(4, tableOutput("table1")),
column(4, tableOutput("table2"))
),
fluidRow(12, plotOutput("plot")))
server <- function(input, output, session) {
reactive_diamonds <- reactive({
req(input$var)
req(input$col)
diamonds
})
reactive_position <- reactive({
switch (input$pos,
"dodge" = position_dodge(),
"stack" = position_stack(),
"fill" = position_fill(),
"nudge" = position_nudge()
)
})
output$table1 <- renderTable({
reactive_diamonds() %>%
group_by(.data[[input$col]]) %>%
summarize(n = as.integer(sum(.data[[input$var]]))) %>%
arrange(desc(n))
})
output$table2 <- renderTable({
reactive_diamonds() %>%
count(.data[[input$col]], wt = price, sort = T)
})
output$plot <- renderPlot({
reactive_diamonds() %>%
ggplot(aes(x = .data[[input$var]], fill=.data[[input$col]]))+
geom_histogram(position = reactive_position(), binwidth = input$bin)
})
}
shinyApp(ui, server)
runApp('Shiny_Web_Applications/app001')
library(shiny)
library(tidyverse)
?theme
runApp('Shiny_Web_Applications/app001')
?labs
runApp('Shiny_Web_Applications/app001')
shiny::runApp('Shiny_Web_Applications/app002')
data()
uspop
library(tidyverse)
data()
smiths
population
who
library(tidyverse)
population
unique(population$country)
population %>% filter(country == "Uganda") %>% ggplot(aes(x=year, y = population))+geom_line()
population %>% filter(country == "Kenya") %>% ggplot(aes(x=year, y = population))+geom_line()
population %>% filter(country == "Kenya") %>% ggplot(aes(x=year, y = population))+geom_histogram()
population %>% filter(country == "Kenya") %>% ggplot(aes(x=year, y = population))+geom_col()
population %>% filter(country == "Kenya") %>% ggplot(aes(x=year, y = population))+geom_point()
install.packages("C:/Users/Herman/Downloads/Compressed/reticulate_1.30.zip", repos = NULL, type = "win.binary")
reticulate::repl_python()
import sys
reticulate::repl_python()
reticulate::repl_python()
y
install.packages("C:/Users/Herman/Downloads/Compressed/vroom_1.6.3.zip", repos = NULL, type = "win.binary")
library(vroom)
vroom::vroom(file.choose())
# load the packages and data required
library(tidyverse)
suicide_data <- vroom("~/Death_rates_for_suicide__by_sex__race__Hispanic_origin__and_age__United_States.csv")
suicide_data <- vroom("C:/Users/Herman/Downloads/Death_rates_for_suicide__by_sex__race__Hispanic_origin__and_age__United_States.csv")
suicide_data
suicide_data$UNIT
suicide_data
suicide_data %>%
mutate_if(is.character, as.factor())
suicide_data %>%
mutate_if(is.character, as.factor)
# data cleaning
suicide_data <- suicide_data %>%
mutate_if(is.character, as.factor) %>%
remove_missing()
suicide_data
suicide_data <- vroom("C:/Users/Herman/Downloads/Death_rates_for_suicide__by_sex__race__Hispanic_origin__and_age__United_States.csv")
table(is.na(suicide_data))
View(suicide_data)
is.na(suicide_data)
data(package='vroom')
unique(suicide_data$YEAR)
colnames(suicide_data)
unique(suicide_data$STUB_NAME)
unique(suicide_data$INDICATOR)
unique(suicide_data$UNIT)
library(tidyverse)
library(vroom)
library(gridExtra)
world_pop_data <-
vroom(
"C:/Users/Herman/Downloads/countries-table.csv"
)
# data cleaning
world_pop_data <- world_pop_data %>%
mutate_if(is.character, as.factor) %>%
remove_missing(na.rm = T) %>%
select(-c(cca2, cca3))
world_pop_data %>%filter(rank<=10) %>%  ggplot(aes(x = pop2000, y=density, fill = country))+geom_density()
library(reticulate)
repl_python()
n
# set the working directory
setwd(choose.dir())
# set the working directory
setwd(choose.dir())
# set the working directory
setwd(choose.dir())
# set the working directory
setwd(choose.dir())
# set the working directory
setwd(choose.dir())
q()
library(tidyverse)
library(mlbench)
library(ggcorrplot)
library(factoextra)
library(FactoMineR)
library(pls)
library(plspm)
# Load the breast cancer dataset
data("BreastCancer", package = "mlbench")
# 3.	To conduct a simulation study using the two methods proposed
library(MASS)
# Set seed for reproducibility
set.seed(123)
# Function to generate random breast cancer data
generate_random_data <- function(n_samples, n_features) {
# Generate random data for normal tissue
normal_data <-
mvrnorm(
n = n_samples,
mu = rep(0, n_features),
Sigma = diag(n_features)
)
# Generate random data for cancerous tissue
cancer_data <-
mvrnorm(
n = n_samples,
mu = rep(2, n_features),
Sigma = diag(n_features)
)
# Combine normal and cancerous data
data_matrix <- rbind(normal_data, cancer_data)
# Create labels (0 for normal, 1 for cancerous)
labels <- rep(c(0, 1), each = n_samples)
# Return data frame with labels
return(data.frame(data_matrix, label = factor(labels)))
}
# Generate random data with 100 samples and 10 features
n_samples <- 100
n_features <- 10
random_data <- generate_random_data(n_samples, n_features)
# Split data into predictor variables and labels
X <- random_data[,-ncol(random_data)]
y <- random_data$label
# Perform PCA using prcomp
pca_result <- prcomp(X, center = TRUE, scale. = TRUE)
# Perform PLS using plspm
latentvar1  <- c(0, 0, 0)
latentvar2 <- c(0, 0, 0)
latentvar3 <- c(1, 1, 0)
path_matrix <- rbind(latentvar1, latentvar2, latentvar3)
colnames(path_matrix) <- rownames(path_matrix)
random_blocks <-  list(c("X1", "X2", "X3"),
c("X4", "X5", "X6"),
c("X7", "X8", "X9"))
plspm_model <-
plspm(X, random_blocks, path_matrix = path_matrix, scale = TRUE)
# Display results
summary(pca_result)
summary(plspm_model)
install.packages('languageserver')
q()
# SET THE WORKING DIRECTORY -----------------------------------------------
setwd('~/Projects_in_R/Power_Of_Good_Design/')
library(tidyverse)
library(gapminder)
gapminder
data(package='ggplot2')
gapminder_data <- gapminder %>%
# factor the character variables
mutate_if(is.character, as.factor) %>%
# drop missing values
drop_na() %>%
# clean the names
janitors::clean_names()
gapminder_data <- gapminder %>%
# factor the character variables
mutate_if(is.character, as.factor) %>%
# drop missing values
drop_na() %>%
# clean the names
janitor::clean_names()
gapminder_data %>%
ggplot(aes(x=life_exp, y=pop, color=continent))+
geom_point()+
labs(
title='A SCATTERPLOT FOR POPULATION AND LIFE EXPECTATION FOR DIFFERENT CONTINENT',
x = 'LIFE EXPECTATION',
y='POPULATION',
fill='CONTINENTS'
)
gapminder_data
max(gapminder_data$year)
# DATA VISUALIZATION USING THE GDP OF DIFFERENT CONTITNENT FOR 1952 AND 2007 -------------------------------------------------------------------------
gapminder_data %>%
filter(year %in% c(1952, 2007)) %>%
ggplot(aes(x= year, y= gdp_percap, fill=continent))+
geom_boxplot(position = 'dodge')+
labs(
title = 'A Boxplot for GDP of different continent for 1952 and 2007',
x = 'years',
y = 'GDP',
fill='continent'
)
gapminder_data %>%
filter(year %in% c(1952, 2007))
# DATA VISUALIZATION USING THE GDP OF DIFFERENT CONTITNENT FOR 1952 AND 2007 -------------------------------------------------------------------------
gapminder_data %>%
filter(year %in% c(1952, 2007)) %>%
ggplot(aes(x= year, y= gdp_percap, fill=continent))+
geom_boxplot(position = 'dodge')+
labs(
title = 'A Boxplot for GDP of different continent for 1952 and 2007',
x = 'years',
y = 'GDP',
fill='continent'
) %>%
facet_wrap(~year)
# DATA VISUALIZATION USING THE GDP OF DIFFERENT CONTITNENT FOR 1952 AND 2007 -------------------------------------------------------------------------
gapminder_data %>%
filter(year %in% c(1952, 2007)) %>%
ggplot(aes(x= year, y= gdp_percap, fill=continent))+
geom_boxplot(position = 'dodge')+
labs(
title = 'A Boxplot for GDP of different continent for 1952 and 2007',
x = 'years',
y = 'GDP',
fill='continent'
) %>%
facet_grid(year)
# DATA VISUALIZATION USING THE GDP OF DIFFERENT CONTITNENT FOR 1952 AND 2007 -------------------------------------------------------------------------
gapminder_data %>%
filter(year %in% c(1952, 2007)) %>%
ggplot(aes(x= year, y= gdp_percap, fill=continent))+
geom_boxplot(position = 'dodge')+
labs(
title = 'A Boxplot for GDP of different continent for 1952 and 2007',
x = 'years',
y = 'GDP',
fill='continent'
) %>%
facet_grid(~year)
# DATA VISUALIZATION USING THE GDP OF DIFFERENT CONTITNENT FOR 1952 AND 2007 -------------------------------------------------------------------------
gapminder_data %>%
filter(year %in% c(1952, 2007)) %>%
ggplot(aes(x= year, y= gdp_percap, fill=continent))+
geom_boxplot(position = 'dodge')+
labs(
title = 'A Boxplot for GDP of different continent for 1952 and 2007',
x = 'years',
y = 'GDP',
fill='continent'
) %>%
facet_wrap(~year)
# DATA VISUALIZATION USING THE GDP OF DIFFERENT CONTITNENT FOR 1952 AND 2007 -------------------------------------------------------------------------
gapminder_data %>%
filter(year %in% c(1952, 2007)) %>%
ggplot(aes(x= year, y= gdp_percap, fill=continent))+
geom_boxplot(position = 'dodge')+
labs(
title = 'A Boxplot for GDP of different continent for 1952 and 2007',
x = 'years',
y = 'GDP',
fill='continent'
) %>%
facet_wrap(~continent)
# DATA VISUALIZATION USING THE GDP OF DIFFERENT CONTITNENT FOR 1952 AND 2007 -------------------------------------------------------------------------
gapminder_data %>%
filter(year %in% c(1952, 2007)) %>%
ggplot(aes(x= as.factor(year), y= gdp_percap, fill=continent))+
geom_boxplot(position = 'dodge')+
labs(
title = 'A Boxplot for GDP of different continent for 1952 and 2007',
x = 'years',
y = 'GDP',
fill='continent'
)
